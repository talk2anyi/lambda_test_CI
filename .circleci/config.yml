# Build settings for Circle CI
version: 2.1

# Environment variables are defined in CircleCI project settings:
# https://app.circleci.com/settings/project/github/BranchIntl/Branch_Python_ML/environment-variables

orbs:
  # Third party orb: https://circleci.com/orbs/registry/orb/datacamp/shallow-checkout
  # (append ?version=0.0.3 to URL to view this version)
  shallow-checkout: datacamp/shallow-checkout@0.0.3
  # Third party orb: https://circleci.com/developer/orbs/orb/circleci/aws-ecr
  # (append ?version=8.2.1 to URL to view this version)
  aws-ecr: circleci/aws-ecr@8.2.1

executors:
    build_machine:
      machine:
        image: ubuntu-2204:2023.04.2
        docker_layer_caching: true
      resource_class: arm.medium
    test_machine_2:
      docker:
      - image: cimg/base:2023.10 #cimg/python:3.10
      #- image: amazon/aws-lambda-python:3.10
      resource_class: small

commands:
  start_docker:
    steps:
      - run:
          name: Start docker engine
          command: |
            sudo usermod -aG docker circleci_deploy
            sudo chmod 666 /var/run/docker.sock
            sudo systemctl restart docker 
            sudo systemctl enable docker
            

  check_docker_versions:
    steps:
      - run:
          name: Check docker versions
          command: |
            sudo docker -v
            sudo docker compose -v

  whats_running:
    steps:
      - run:
          name: What's running?
          command: sudo docker ps

  install_aws_cli:
    steps:
      - run:
          name: Install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  collator_image_build_us:
    executor: test_machine_2
    steps:
      - shallow-checkout/checkout
      - aws-ecr/build-and-push-image:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: false
          dockerfile: ./collator/Dockerfile-US
          path: .
          platform: linux/amd64
          region: "${AWS_US_EAST_REGION}"
          registry-id: AWS_ECR_REGISTRY_ID
          repo: lambda_images
          tag: "${CIRCLE_SHA1}"

  collator_us_staging:
    executor: test_machine_2

    working_directory: ~/project

    steps:
      - shallow-checkout/checkout
      - setup_remote_docker: 
          docker_layer_caching: true  

      - install_aws_cli

      - start_docker

      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 481233474772.dkr.ecr.$AWS_REGION.amazonaws.com            

      - check_docker_versions 

      - whats_running

      - run:
          name: Build Lambda Docker Image
          command: |
            AWS_REGION='us-east-1'
            IMAGE_VERSION='2023-10-25'
          
            docker build --platform linux/amd64 --tag 481233474772.dkr.ecr.$AWS_REGION.amazonaws.com/lambda_images:lambda_test_collator-$IMAGE_VERSION-amd64 .

      - run:
          name: Push Image to ECR
          command: |
            docker push 481233474772.dkr.ecr.$AWS_REGION.amazonaws.com/lambda_images:lambda_test_collator-$IMAGE_VERSION-amd64

      - run:
          name: Update AWS Lambda Function
          command: |
            AWS_REGION='us-east-1'
            IMAGE_URI=481233474772.dkr.ecr.$AWS_REGION.amazonaws.com/lambda_images:lambda_collator-$IMAGE_VERSION-amd64
            IAM_ROLE_ARN=arn:aws:iam::481233474772:user/circleci_deploy
          
            aws lambda create-function \
              --function-name s3_log_collation_v2_test \
              --package-type Image \
              --code ImageUri=$IMAGE_URI \
              --role $IAM_ROLE_ARN



workflows:
  version: 2
  deploys:
      jobs:
        - collator_image_build_us
        - collator_us_staging_approval:
            type: approval
            filters:
              branches:
                only:
                  - main
            requires:
              - collator_image_build_us

        - collator_us_staging:
            filters:
              branches:
                only:
                  - main
            requires:
              - collator_us_staging_approval
